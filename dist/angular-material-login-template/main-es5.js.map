{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/about/about.component.ts","webpack:///src/app/components/about/about.component.html","webpack:///src/app/components/dashboard/dashboard.component.ts","webpack:///src/app/components/dashboard/dashboard.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/log-in/log-in.component.ts","webpack:///src/app/components/log-in/log-in.component.html","webpack:///src/app/components/logout/logout.component.ts","webpack:///src/app/components/register/register.component.ts","webpack:///src/app/components/register/register.component.html","webpack:///src/app/components/team/team.component.ts","webpack:///src/app/components/team/team.component.html","webpack:///src/app/constants/REST_API.ts","webpack:///src/app/helpers/auth-guard.ts","webpack:///src/app/helpers/error-interceptors.ts","webpack:///src/app/helpers/jwt.interceptor.ts","webpack:///src/app/services/AppService.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","pathMatch","redirectTo","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","schemas","AboutComponent","appService","api","router","serverErrorMessage","getAboutDetails","retreiveUserDashBoardDetails","dashboard","subscribe","res","aboutData","err","console","log","DashboardComponent","totalAmount","dasboardSuccess","dashboardFormFields","description","amount","teammember","role","dashboardForm","required","min","max","message","dashboardData","user","forEach","element","parseInt","userDashboardDetails","value","createDashboard","pipe","reset","get","createdashBoard","HeaderComponent","logout","setRegisteredUserObs","navigate","LogInComponent","pageTitle","loginFormFields","username","password","isRegistered","getRegisteredUserObs","loginForm","minLength","evt","userLoginDetails","login","authAPIs","userId","token","register","LogoutComponent","template","RegisterComponent","registerFormFields","email","confirmPassword","confPwd","registerForm","userRegistrationDetails","setErrors","registerUser","signIn","TeamComponent","getTeamDetails","teamData","REST_API","server_URL","AuthGuard","route","state","localStorage","getItem","JSON","parse","queryParams","returnUrl","url","providedIn","ErrorInterceptor","accountService","request","next","jwt","handle","includes","status","error","statusText","JwtInterceptor","clone","setHeaders","Authorization","AppService","http","userRegistered","currentUserSubject","currentUser","asObservable","URL","userDetails","post","setItem","stringify","put","currentUserValue","removeItem","environment","production","apiUrl","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AboutComponent } from './components/about/about.component';\r\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\r\nimport { LogInComponent } from './components/log-in/log-in.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { TeamComponent } from './components/team/team.component';\r\nimport { LogoutComponent } from './components/logout/logout.component';\r\n\r\nimport { AuthGuard } from './helpers/auth-guard'\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'login' },\r\n  { path: 'login', component: LogInComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },\r\n  { path: 'about', component: AboutComponent, canActivate: [AuthGuard] },\r\n  { path: 'team', component: TeamComponent, canActivate: [AuthGuard] },\r\n  { path: 'logout', component: LogoutComponent, canActivate: [AuthGuard] }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { }\r\n","import { Component, OnChanges, OnInit, SimpleChange } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  \r\n\r\n}\r\n","<div class=\"layout\">\r\n\r\n\r\n    <router-outlet></router-outlet>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n/* Components */\r\nimport { LogInComponent } from './components/log-in/log-in.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\r\nimport { TeamComponent } from './components/team/team.component';\r\n\r\nimport { AppService } from './services/AppService';\r\nimport { REST_API } from './constants/REST_API'\r\nimport { LogoutComponent } from './components/logout/logout.component';\r\nimport { AboutComponent } from './components/about/about.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { JwtInterceptor } from './helpers/jwt.interceptor';\r\nimport { ErrorInterceptor } from './helpers/error-interceptors';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegisterComponent,\r\n    LogInComponent,\r\n    DashboardComponent,\r\n    AboutComponent,\r\n    TeamComponent,\r\n    LogoutComponent,\r\n    HeaderComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [ \r\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n    AppService, REST_API,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class AppModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { REST_API } from '../../constants/REST_API';\r\nimport { AppService } from '../../services/AppService';\r\n\r\n@Component({\r\n  selector: 'about',\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.css']\r\n})\r\nexport class AboutComponent implements OnInit {\r\n  serverErrorMessage: string = '';\r\n  aboutData: any;\r\n  constructor(\r\n    public appService: AppService,\r\n    public api: REST_API,\r\n    public router: Router) { }\r\n  ngOnInit() {\r\n    this.getAboutDetails();\r\n  }\r\n  getAboutDetails() {\r\n    this.appService.retreiveUserDashBoardDetails(this.api.dashboard.retreiveUserDashBoardDetails).subscribe(res => {\r\n      this.aboutData = res.dashboard;\r\n    }, (err) => {\r\n      console.log('Error', err);\r\n      this.serverErrorMessage = err;\r\n    })\r\n  }\r\n}\r\n\r\n","<header></header>\r\n<div class=\"container-fluid\">\r\n    <h3 *ngIf=\"aboutData && aboutData.length == 0\">Please add a description in the dashboard to see the About section</h3>\r\n    <div *ngIf=\"aboutData && aboutData.length > 0\">\r\n        <div class=\"description\" *ngFor=\"let d of aboutData\">\r\n                {{d.description}}\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { REST_API } from '../../constants/REST_API';\r\nimport { AppService } from '../../services/AppService';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent {\r\n  totalAmount: number =  0\r\n  dasboardSuccess: string = '';\r\n  serverErrorMessage: string = '';\r\n  dashboardData: any;\r\n  user: any;\r\n  constructor(\r\n    public appService: AppService,\r\n    public api: REST_API,\r\n    public router: Router) { }\r\n  dashboardFormFields = { description: '', amount: '', teammember: '', role: '' };\r\n  dashboardForm: FormGroup;\r\n\r\n  ngOnInit(): void {\r\n    this.dashboardForm = new FormGroup(\r\n      {\r\n       \r\n        'description': new FormControl(this.dashboardFormFields.description, [\r\n          Validators.required, Validators.min(100), Validators.max(100)\r\n        ]),\r\n        'amount': new FormControl(this.dashboardFormFields.amount, [\r\n          Validators.required\r\n        ]),\r\n        'teammember': new FormControl(this.dashboardFormFields.teammember, [\r\n          Validators.required\r\n        ]),\r\n        'role': new FormControl(this.dashboardFormFields.role, [\r\n          Validators.required\r\n        ])\r\n      }\r\n\r\n    );\r\n\r\n    this.retreiveUserDashBoardDetails();\r\n  }\r\n  get description() { return this.dashboardForm.get('description'); }\r\n  get amount() { return this.dashboardForm.get('amount'); }\r\n  get teammember() { return this.dashboardForm.get('teammember'); }\r\n  get role() { return this.dashboardForm.get('role'); }\r\n\r\n  retreiveUserDashBoardDetails() {\r\n    this.appService.retreiveUserDashBoardDetails(this.api.dashboard.retreiveUserDashBoardDetails).subscribe(res => {\r\n      this.dasboardSuccess = res.message;\r\n      this.dashboardData = res.dashboard;\r\n      this.user = res.user;\r\n      this.totalAmount = 0;\r\n     this.dashboardData.forEach(element => {\r\n       this.totalAmount += parseInt(element.amount);\r\n      });\r\n    }, (err) => {\r\n      console.log('Error', err);\r\n      this.serverErrorMessage = err;\r\n    })\r\n  }\r\n  createdashBoard() {\r\n    let userDashboardDetails: any = this.dashboardForm.value;\r\n    this.appService.createDashboard(this.api.dashboard.createDashboard, userDashboardDetails)\r\n      .pipe(first())\r\n      .subscribe(res => {\r\n        this.dasboardSuccess = res.message;\r\n        this.retreiveUserDashBoardDetails();\r\n        this.dashboardForm.reset();\r\n      }, (err) => {\r\n        console.log('Error', err);\r\n        this.serverErrorMessage = err;\r\n      });\r\n  }\r\n\r\n}","<header></header>\r\n<div class=\"container-fluid\">\r\n    <div>\r\n        <p *ngIf=\"user\" class=\"welcome-user\">Welcome {{user.username}} !</p>\r\n        <p *ngIf=\"user\" class=\"lastlogin\">Last login: {{user.lastlogin | date}}</p>\r\n        <p class=\"balance\">Account Balance: Rs. {{totalAmount}}</p>\r\n        <div *ngIf=\"serverErrorMessage\" class=\"isError\">{{serverErrorMessage}}</div>\r\n        <!-- <div *ngIf=\"dasboardSuccess\" class=\"isSuccess\">{{dasboardSuccess}}</div> -->\r\n        <table *ngIf=\"dashboardData && dashboardData.length > 0\">\r\n            <thead>\r\n                <th>Date</th>\r\n                <th>Description</th>\r\n                <th>Amount</th>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let d of dashboardData\">\r\n                    <td>{{d.updatedAt | date}}</td>\r\n                    <td>{{d.description}}</td>\r\n                    <td>{{d.amount}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <p class=\"welcome-user\">Add a new dashboard:</p>\r\n\r\n        <form [formGroup]=\"dashboardForm\" #formReg=\"ngForm\">\r\n        \r\n            <div class=\"form-group\">\r\n                <label for=\"description\">Description</label>\r\n                <textarea  rows=\"2\"  maxlength=\"100\" minlength=\"100\" id=\"description\" class=\"form-control\" formControlName=\"description\" required></textarea>\r\n                <div *ngIf=\"description.invalid && (description.dirty || description.touched)\"\r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf=\"description.errors.required\">\r\n                        Field is required.\r\n                    </div>\r\n                    <div *ngIf=\"description.errors.minlength\">\r\n                        Must be at least 100 characters long.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"amount\">Amount</label>\r\n                <input type=\"number\" id=\"amount\" class=\"form-control\" formControlName=\"amount\" required>\r\n                <div *ngIf=\"amount.invalid && (amount.dirty || amount.touched)\" class=\"alert alert-danger\">\r\n                    <div *ngIf=\"amount.errors.required\">\r\n                        Field is required.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label for=\"teammember\">Add a team member</label>\r\n                <input id=\"teammember\" class=\"form-control\" formControlName=\"teammember\" required>\r\n                <div *ngIf=\"teammember.invalid && (teammember.dirty || teammember.touched)\" class=\"alert alert-danger\">\r\n                    <div *ngIf=\"teammember.errors.required\">\r\n                        Field is required.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label for=\"role\">Assign Role</label>\r\n                <select id=\"role\" class=\"form-control\" formControlName=\"role\" required>\r\n                    <option value=\"Admin\">Admin</option>\r\n                    <option value=\"Manager\">Manager</option>\r\n                    <option value=\"Developer\">Developer</option>\r\n                    <option value=\"Tester\">Tester</option>\r\n                </select>\r\n                <div *ngIf=\"role.invalid && (role.dirty || role.touched)\" class=\"alert alert-danger\">\r\n                    <div *ngIf=\"role.errors.required\">\r\n                        Field is required.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <button type=\"submit\" class=\"btn btn-default\" [disabled]=\"dashboardForm.invalid\"\r\n                (click)=\"createdashBoard()\">Create Dashboard</button>\r\n        </form>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AppService } from 'src/app/services/AppService';\r\n\r\n\r\n@Component({\r\n    selector: 'header',\r\n    templateUrl: './header.component.html',\r\n    styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n    constructor(public router: Router, public appService: AppService) { }\r\n\r\n    ngOnInit(){\r\n    }\r\n    logout() {\r\n        this.appService.logout();\r\n        this.appService.setRegisteredUserObs(false);\r\n        this.router.navigate(['/login'])\r\n    }\r\n}","\r\n<nav>\r\n    <a routerLink=\"/dashboard\" routerLinkActive=\"active\">Dashboard</a>\r\n    <a routerLink=\"/about\" routerLinkActive=\"active\">About</a>\r\n    <a routerLink=\"/team\" routerLinkActive=\"active\">Team</a>\r\n    <a routerLink=\"/logout\" routerLinkActive=\"active\" (click)=\"logout()\">Logout</a>\r\n</nav>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AppService } from '../../services/AppService';\r\nimport { REST_API } from '../../constants/REST_API';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './log-in.component.html',\r\n  styleUrls: ['./log-in.component.css']\r\n})\r\nexport class LogInComponent implements OnInit {\r\n  pageTitle: string = 'Login'\r\n  loginFormFields = { username: '', password: '' };\r\n  isRegistered: boolean = false;\r\n  loginForm: FormGroup;\r\n  serverErrorMessage: string = '';\r\n  constructor(\r\n    public appService: AppService,\r\n    public api: REST_API,\r\n    public router: Router) { }\r\n  ngOnInit(): void {\r\n    this.appService.getRegisteredUserObs().subscribe(res => {\r\n      this.isRegistered = res;\r\n    })\r\n\r\n    this.loginForm = new FormGroup({\r\n      'username': new FormControl(this.loginFormFields.username, [\r\n        Validators.required\r\n      ]),\r\n      'password': new FormControl(this.loginFormFields.password, [\r\n        Validators.required, Validators.minLength(8)\r\n      ])\r\n    });\r\n  }\r\n\r\n  get username() { return this.loginForm.get('username'); }\r\n\r\n  get password() { return this.loginForm.get('password'); }\r\n\r\n  login(evt: Event) {\r\n    let userLoginDetails: any = this.loginForm.value;\r\n\r\n    this.appService.login(this.api.authAPIs.login, userLoginDetails)\r\n      .pipe(first())\r\n      .subscribe(res => {\r\n        if (res.userId && res.token) {\r\n          this.router.navigate(['/dashboard']);\r\n        }\r\n      }, (err) => {\r\n        console.log('Error', err);\r\n        this.serverErrorMessage = err;\r\n      });\r\n  }\r\n\r\n  register() {\r\n    this.router.navigate(['register']);\r\n  }\r\n}","<div class=\"container-fluid layout\">\r\n\r\n  <h3>{{pageTitle}}</h3>\r\n<div *ngIf=\"isRegistered\" class=\"isSuccess\">Registration Done!</div>\r\n<div *ngIf=\"serverErrorMessage\" class=\"isError\">{{serverErrorMessage}}</div>\r\n  <form [formGroup]=\"loginForm\" #formDir=\"ngForm\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">User ID</label>\r\n        <input id=\"username\" type=\"email\" ngModel email class=\"form-control\" formControlName=\"username\" required>\r\n        <div *ngIf=\"username.invalid && (username.dirty || username.touched)\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"username.errors.required\">\r\n            User ID is required.\r\n          </div>\r\n            <div *ngIf=\"!username.errors.required && username.invalid\">\r\n              Invalid User ID\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input id=\"password\" type=\"password\" class=\"form-control\" formControlName=\"password\" required>\r\n        <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"password.errors.required\">\r\n            Password is required.\r\n          </div>\r\n          <div *ngIf=\"password.errors.minlength\">\r\n            Must be at least 8 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"login-btn\">\r\n      <button type=\"submit\" class=\"btn btn-default\" [disabled]=\"loginForm.invalid\" (click)=\"login($event)\">Login</button>\r\n      <button class=\"btn btn-default\" (click)=\"register()\">Register</button>\r\n      </div>\r\n  </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AppService } from '../../services/AppService';\r\n\r\n@Component({\r\n    selector: 'logout',\r\n    template: `Logout`\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n    pageTitle: string = 'Log Out'\r\n    constructor(\r\n        public appService: AppService,\r\n        public router: Router) { }\r\n    ngOnInit(): void {\r\n        this.appService.logout();\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\nimport { AppService } from '../../services/AppService';\r\nimport { REST_API } from '../../constants/REST_API';\r\n\r\n@Component({\r\n  selector: 'register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  serverErrorMessage: string = '';\r\n  constructor(\r\n    public appService: AppService,\r\n    public api: REST_API,\r\n    public router: Router) { }\r\n  pageTitle: string = 'Sign Up'\r\n  registerFormFields = { username: '', email: '', password: '', confirmPassword: '' };\r\n  confPwd: boolean = false;\r\n  registerForm: FormGroup;\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = new FormGroup(\r\n      {\r\n        'username': new FormControl(this.registerFormFields.username, [\r\n          Validators.required\r\n        ]),\r\n        'email': new FormControl(this.registerFormFields.email, [\r\n          Validators.required\r\n        ]),\r\n        'password': new FormControl(this.registerFormFields.password, [\r\n          Validators.required, Validators.minLength(8)\r\n        ]),\r\n        'confirmPassword': new FormControl(this.registerFormFields.confirmPassword, [\r\n          Validators.required,\r\n\r\n        ])\r\n      }\r\n\r\n    );\r\n\r\n\r\n  }\r\n  get username() { return this.registerForm.get('username'); }\r\n  get password() { return this.registerForm.get('password'); }\r\n  get email() { return this.registerForm.get('email'); }\r\n  get confirmPassword() {\r\n    if (this.registerForm.get('password').value !== this.registerForm.get('confirmPassword').value) {\r\n      this.registerForm.get('confirmPassword').setErrors({ 'incorrect': true })\r\n    } else {\r\n      this.registerForm.get('confirmPassword').setErrors(null);\r\n    }\r\n\r\n    return this.registerForm.get('confirmPassword');\r\n  }\r\n\r\n  registerUser(evt: Event) {\r\n    let userRegistrationDetails: any = this.registerForm.value;\r\n    this.appService.register(this.api.authAPIs.register, userRegistrationDetails)\r\n      .pipe(first())\r\n      .subscribe(res => {\r\n        if (res.userId) {\r\n          this.router.navigate(['/login']);\r\n          this.appService.setRegisteredUserObs(true);\r\n        }\r\n\r\n      }, (err) => {\r\n        console.log('Error', err);\r\n        this.serverErrorMessage = err;\r\n      });\r\n  }\r\n\r\n  signIn(){\r\n  this.router.navigate(['login']);\r\n  }\r\n}","<div class=\"container-fluid layout\">\r\n  <h3>{{pageTitle}}</h3>\r\n<div *ngIf=\"serverErrorMessage\" class=\"isError\">{{serverErrorMessage}}</div>\r\n  \r\n  <form [formGroup]=\"registerForm\" #formReg=\"ngForm\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">Name</label>\r\n        <input id=\"username\" class=\"form-control\" formControlName=\"username\" required>\r\n        <div *ngIf=\"username.invalid && (username.dirty || username.touched)\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"username.errors.required\">\r\n            Name is required.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input id=\"email\" type=\"email\" ngModel email class=\"form-control\" formControlName=\"email\" required>\r\n        <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"email.errors.required\">\r\n            Email is required.\r\n          </div>\r\n          <div *ngIf=\"!email.errors.required && email.invalid\">\r\n            Invalid Email\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input id=\"password\" type=\"password\" class=\"form-control\" formControlName=\"password\" required>\r\n        <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"password.errors.required\">\r\n            Password is required.\r\n          </div>\r\n          <div *ngIf=\"password.errors.minlength\">\r\n            Must be at least 8 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"confirmPassword\">Confirm Password</label>\r\n        <input id=\"confirmPassword\" type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\"  required>\r\n        <div *ngIf=\"confirmPassword && confirmPassword.errors && confirmPassword.errors.incorrect\" class=\"alert alert-danger\">\r\n          Passswords don't match.\r\n        </div>\r\n      </div>\r\n      <div class=\"login-btn\">\r\n      <button type=\"submit\" class=\"btn btn-default\" [disabled]=\"registerForm.invalid\" (click)=\"registerUser($event)\">Register</button>\r\n      <button class=\"btn btn-default\" (click)=\"signIn()\">Login</button>\r\n      </div>\r\n  </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { REST_API } from '../../constants/REST_API';\r\nimport { AppService } from '../../services/AppService';\r\n\r\n@Component({\r\n  selector: 'team',\r\n  templateUrl: './team.component.html',\r\n  styleUrls: ['./team.component.css']\r\n})\r\nexport class TeamComponent implements OnInit {\r\n  pageTitle: string = 'Meet the Team';\r\n  serverErrorMessage: string = '';\r\n  teamData: any;\r\n  constructor(\r\n    public appService: AppService,\r\n    public api: REST_API,\r\n    public router: Router) { }\r\n  ngOnInit() {\r\n    this.getTeamDetails();\r\n  }\r\n  getTeamDetails() {\r\n    this.appService.retreiveUserDashBoardDetails(this.api.dashboard.retreiveUserDashBoardDetails).subscribe(res => {\r\n      this.teamData = res.dashboard;\r\n    }, (err) => {\r\n      console.log('Error', err);\r\n      this.serverErrorMessage = err;\r\n    })\r\n  }\r\n}\r\n\r\n","<header></header>\r\n<div class=\"container-fluid\">\r\n  <h3 *ngIf=\"teamData && teamData.length > 0\">{{pageTitle}}</h3>\r\n  <h3 *ngIf=\"teamData && teamData.length == 0\">You have not added any team member</h3>\r\n    <table *ngIf=\"teamData && teamData.length > 0\">\r\n      <thead>\r\n        <th>Team Member</th>\r\n        <th>Role</th>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let d of teamData\">\r\n          <td>{{d.teammember}}</td>\r\n          <td>{{d.role}}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n   \r\n</div>","export class REST_API {\r\n    server_URL: string = 'https://app-fullstack-aparna.herokuapp.com/';\r\n    authAPIs = {\r\n        register: this.server_URL + 'auth/register',\r\n        login: this.server_URL + 'auth/login'\r\n    }\r\n    dashboard = {\r\n        createDashboard: this.server_URL + 'dashboard/createYourDashboard',\r\n        retreiveUserDashBoardDetails: this.server_URL + 'dashboard/retreiveUserDashBoardDetails'\r\n    }\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    userData: any;\r\n    constructor(\r\n        private router: Router\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        let user = '';\r\n        if (localStorage.getItem('currentUser')) {\r\n            user = JSON.parse(localStorage.getItem('currentUser')).token;\r\n        }\r\n        if (user) {\r\n            return true;\r\n        }\r\n\r\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AppService } from '../services/AppService';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    userData: any;\r\n    constructor(private accountService: AppService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        let jwt = '';\r\n        if (localStorage.getItem('currentUser')) {\r\n            jwt = JSON.parse(localStorage.getItem('currentUser')).token;\r\n        }\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if ([401, 403].includes(err.status) && jwt) {\r\n                // auto logout if 401 or 403 response returned from api\r\n                this.accountService.logout();\r\n            }\r\n            const error = err.error?.message || err.statusText;\r\n            console.log(err);\r\n            return throwError(error);\r\n        }))\r\n    }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    userData : any;\r\n    constructor() { }\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        let jwt = '';\r\n        if (localStorage.getItem('currentUser')){\r\n             jwt = JSON.parse(localStorage.getItem('currentUser')).token;\r\n        }\r\n        if (!!jwt) {\r\n            req = req.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${jwt}`\r\n                }\r\n            });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n\r\n    \r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n//app imports\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AppService {\r\n    public  userRegistered: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    public currentUserSubject: BehaviorSubject<User>;\r\n    public currentUser: Observable<User>;\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\r\n        this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n\r\n    public get currentUserValue(): User {\r\n        return this.currentUserSubject.value;\r\n    }\r\n\r\n    getUserValue(){\r\n        return this.currentUserSubject.asObservable();\r\n    }\r\n    getRegisteredUserObs(){\r\n        return this.userRegistered.asObservable();\r\n    }\r\n\r\n    setRegisteredUserObs(isRegistered: boolean) {\r\n        this.userRegistered.next(isRegistered);\r\n    }\r\n    \r\n    login(URL: string, userDetails: any) {\r\n        return this.http.post<any>(URL,\r\n            {\r\n                email: userDetails.username,\r\n                password: userDetails.password\r\n            })\r\n            .pipe(map(user => {\r\n                if (user && user.token) {\r\n                    localStorage.setItem('currentUser', JSON.stringify(user));\r\n                    this.currentUserSubject.next(user);\r\n                }\r\n                return user;\r\n            }));\r\n    }\r\n    register(URL: string, userDetails: any): Observable<any> {\r\n        return this.http.put<any>(URL,\r\n            {\r\n                email: userDetails.email,\r\n                password: userDetails.password,\r\n                username: userDetails.username\r\n            })\r\n            .pipe(map(user => {\r\n                return user;\r\n            }));\r\n    }\r\n    createDashboard(URL: string, userDashboardDetails: any): Observable<any> {\r\n        return this.http.post<any>(URL,\r\n            {\r\n                description: userDashboardDetails.description,\r\n                amount: userDashboardDetails.amount,\r\n                teammember: userDashboardDetails.teammember,\r\n                role: userDashboardDetails.role\r\n            })\r\n            .pipe(map(dashboard => {\r\n                return dashboard;\r\n            }));\r\n    }\r\n    retreiveUserDashBoardDetails(URL: string): Observable<any> {\r\n        return this.http.get<any>(URL + '?userId=' + this.currentUserValue['userId'])\r\n            .pipe(map(dashboard => {\r\n                return dashboard;\r\n            }));\r\n    }\r\n    logout() {\r\n        localStorage.removeItem('currentUser');\r\n        this.currentUserSubject.next(null);\r\n        return;\r\n    }\r\n}","export const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:4200'\r\n};\r\n\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}